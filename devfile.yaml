schemaVersion: 2.2.0
metadata:
  name: java-postgres-food-app
  version: 1.0.0
  displayName: "Java Spring Boot & PostgreSQL"
  description: "A Spring Boot application with a PostgreSQL backend, ready for OpenShift Dev Spaces."
  tags: ["Java", "Spring", "PostgreSQL", "Maven", "Swagger"]

projects:
  - name: devspace-demo
    git:
      checkoutFrom:
        revision: main
      remotes:
        origin: "https://github.com/dhananjaymule/devspace-demo.git"

components:
  # --- Maven Tooling ---
  # Defines the container image and settings for our development tools.
  - name: tools
    container:
      image: "registry.redhat.io/devspaces/udi-rhel8:latest"
      memoryLimit: "4Gi"
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      endpoints:
        - name: app-ui
          targetPort: 8080
          protocol: http
        - name: swagger-ui
          targetPort: 8080
          path: /swagger-ui.html
          protocol: http
      env:
        # Pass the database connection details to the application.
        # The 'localhost' hostname is used for pod-internal communication.
        - name: SPRING_DATASOURCE_URL
          value: jdbc:postgresql://localhost:5432/fooddb
        - name: SPRING_DATASOURCE_USERNAME
          value: postgres
        - name: SPRING_DATASOURCE_PASSWORD
          value: postgres
        - name: SPRING_JPA_DATABASE_PLATFORM
          value: org.hibernate.dialect.PostgreSQLDialect

  # --- PostgreSQL Database Component ---
  # This component defines the PostgreSQL database as a dedicated container.
  - name: postgres
    container:
      image: registry.redhat.io/rhel9/postgresql-15
      memoryLimit: 1G
      env:
        - name: POSTGRESQL_USER
          value: postgres
        - name: POSTGRESQL_PASSWORD
          value: postgres
        - name: POSTGRESQL_DATABASE
          value: fooddb
        - name: POSTGRESQL_ADMIN_PASSWORD
          value: postgres
      volumeMounts:
        - name: pgdata
          path: /var/lib/pgsql/data
      endpoints:
        - name: postgres
          targetPort: 5432
          exposure: internal
          protocol: tcp

  # --- Persistent Volumes ---
  - name: m2
    volume:
      size: 1Gi
  - name: pgdata
    volume:
      size: 1Gi

commands:
  # 1. Installs dependencies and builds the application JAR.
  - id: 1-build
    exec:
      component: tools
      commandLine: "mvn clean package"
      workingDir: ${PROJECTS_ROOT}/devspace-demo
      group:
        kind: build
        isDefault: true

  # 2. Runs the compiled Java application after ensuring the database is ready.
  - id: 2-run
    exec:
      component: tools
      # This command now uses 'pg_isready' to ensure the database can accept connections before starting.
      commandLine: "echo 'Waiting for PostgreSQL to be ready...'; while ! pg_isready -h localhost -p 5432 -q; do sleep 1; done; echo 'PostgreSQL is ready.'; java -jar target/food-ordering-app-0.0.1-SNAPSHOT.jar"
      workingDir: ${PROJECTS_ROOT}/devspace-demo
      group:
        kind: run
        isDefault: true

  # 3. (Optional) Debug command.
  - id: 3-debug
    exec:
      component: tools
      # Add the same robust waiting mechanism to the debug command.
      commandLine: "echo 'Waiting for PostgreSQL to be ready...'; while ! pg_isready -h localhost -p 5432 -q; do sleep 1; done; echo 'PostgreSQL is ready.'; java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n -jar target/food-ordering-app-0.0.1-SNAPSHOT.jar"
      workingDir: ${PROJECTS_ROOT}/devspace-demo
      group:
        kind: debug
        isDefault: true

# --- Workspace Lifecycle Events ---
# Defines commands that run automatically at different stages of the workspace lifecycle.
events:
  # The 'postStart' event runs after all components are started. This is the correct place for a build command.
  postStart:
    # We reference the '1-build' command by its string ID.
    - 1-build

